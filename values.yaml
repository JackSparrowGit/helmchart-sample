# Default values for helmchart-sample.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# is statefulset ?,default false
statefulset:
  enabled: false

# change namespace which namespace you want
namespace: default

image: 
  # your docker repository
  repository: helmchart-sample
  # Overrides the pullPolicy to Always or IfNotPresent
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# set $key:$value to override envs,those for sample
envs: 
  spring.datasource.url: jdbc:mysql://mysql.default.svc:3306/sample?characterEncoding=utf-8&useSSL=false&allowMultiQueries=true
  spring.datasource.username: root
  spring.datasource.password: root
  spring.redis.host: redis-cache.default.svc
  spring.redis.password: "12345678"
  harbor.config.imagePullSecret: harbor

command: 
  - "sh"
  - "-c"
  - "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar app.jar"

# persistence 
persistence:
  # default value "false"
  enabled: false
  path: "/tmp"
  # subPath:
  # default value is '-' 
  storageClass: "-"
  #storageClass: "nfs-client"
  accessMode: ReadWriteOnce
  annotations: {}
  size: 10Gi
  # existingClaim: {}
  # mountPaths: []

imagePullSecrets: [] 
#  - name: harbor

nameOverride: ""

fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created,default value "false"
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

clusterRole:
  # Specifies whether a cluster role should be created, default value "false"
  create: false
  annotations: {}
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  # set your appserver's port
  # port: 8080
  ports:
    http:
      port: 8080
      protocol: TCP

ingress:
  # set ingress enable, default false
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# if empty set value '{}'
resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  
  #limits:
  #  cpu: 1000m
  #  memory: 2Gi
  #requests:
  #  cpu: 1000m
  #  memory: 1Gi

initContainers: []
# - name: handle something
#   image: busybox
#   imagePullPolicy: IfNotPresent
#   command: ["/bin/sh","-c","echo 'xxx'"]

probe:
  # probe enabled default value is false
  enabled: false

#livenessProbe:
#  httpGet:
#    path: /
#    port: 8080
#  initialDelaySeconds: 30
#  periodSeconds: 10
#  timeoutSeconds: 5
#  successThreshold: 1
#  failureThreshold: 3

#readinessProbe:
#  httpGet:
#    path: /
#    port: 8080
  # tcpSocket:
  #   port: 8080
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  timeoutSeconds: 1
#  successThreshold: 1
#  failureThreshold: 3
  

autoscaling:
  # set hpa values, default "false"
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
